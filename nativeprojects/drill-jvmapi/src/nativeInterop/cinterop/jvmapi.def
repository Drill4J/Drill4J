headers = jvmti.h stdbool.h jmm.h management.h
excludedFunctions = JNI_OnLoad Agent_OnLoad Agent_OnAttach Agent_OnUnload

---

typedef struct {
 jvmtiEnv *jvmti;
 JNIEnv *jniEnv;
 jboolean vm_is_started;
 jrawMonitorID lock;
 bool S_JVMTI_EVENT_BREAKPOINT;
 bool IS_JVMTI_EVENT_CLASS_FILE_LOAD_HOOK;
 bool IS_JVMTI_EVENT_CLASS_LOAD;
 bool IS_JVMTI_EVENT_CLASS_PREPARE;
 bool IS_JVMTI_EVENT_COMPILED_METHOD_LOAD;
 bool IS_JVMTI_EVENT_COMPILED_METHOD_UNLOAD;
 bool IS_JVMTI_EVENT_DATA_DUMP_REQUEST;
 bool IS_JVMTI_EVENT_DYNAMIC_CODE_GENERATED;
 bool IS_JVMTI_EVENT_EXCEPTION;
 bool IS_JVMTI_EVENT_EXCEPTION_CATCH;
 bool IS_JVMTI_EVENT_FIELD_ACCESS;
 bool IS_JVMTI_EVENT_FIELD_MODIFICATION;
 bool IS_JVMTI_EVENT_FRAME_POP;
 bool IS_JVMTI_EVENT_GARBAGE_COLLECTION_FINISH;
 bool IS_JVMTI_EVENT_GARBAGE_COLLECTION_START;
 bool IS_JVMTI_EVENT_METHOD_ENTRY;
 bool IS_JVMTI_EVENT_METHOD_EXIT;
 bool IS_JVMTI_EVENT_MONITOR_CONTENDED_ENTER;
 bool IS_JVMTI_EVENT_MONITOR_CONTENDED_ENTERED;
 bool IS_JVMTI_EVENT_MONITOR_WAIT;
 bool IS_JVMTI_EVENT_MONITOR_WAITED;
 bool IS_JVMTI_EVENT_NATIVE_METHOD_BIND;
 bool IS_JVMTI_EVENT_OBJECT_FREE;
 bool IS_JVMTI_EVENT_RESOURCE_EXHAUSTED;
 bool IS_JVMTI_EVENT_SINGLE_STEP;
 bool IS_JVMTI_EVENT_THREAD_END;
 bool IS_JVMTI_EVENT_THREAD_START;
 bool IS_JVMTI_EVENT_VM_DEATH;
 bool IS_JVMTI_EVENT_VM_INIT;
 bool IS_JVMTI_EVENT_VM_OBJECT_ALLOC;
 bool IS_JVMTI_EVENT_VM_START;
 bool IS_JVMTI_EVENT_BREAKPOINT;
} GlobalAgentData;


static GlobalAgentData *gdata;


typedef struct {
 JavaVM *jvm;
 jvmtiEventCallbacks callbackss;
 void* tes;
} javaVMGlob;

static javaVMGlob *gjavaVMGlob;

void saveVmToGlobal(JavaVM *vmm){
    static javaVMGlob data;
    (void)memset((void*)&data, 0, sizeof(data));
    gjavaVMGlob = &data;
    gjavaVMGlob->jvm = vmm;
}

jint agentSetup(JavaVM vm)
{
    static GlobalAgentData data;
    jvmtiEnv              *jvmti;
    jvmtiError             error;
    jint                   res;
    jvmtiCapabilities      capabilities;
    jvmtiEventCallbacks    callbacks;
    (void)memset((void*)&data, 0, sizeof(data));
    gdata = &data;
    res = vm->GetEnv(vm,(void **)&jvmti, JVMTI_VERSION_1);
    gdata->jvmti = jvmti;

   return JNI_OK;
   }

extern void jvmtiEventVMInitEvent(jvmtiEnv *jvmti_env,
     JNIEnv* jni_env,
     jthread thread);


extern void jvmtiEventNativeMethodBindEvent(jvmtiEnv *jvmti_env,
                                              JNIEnv* jni_env,
                                              jthread thread,
                                              jmethodID method,
                                              void* address,
                                              void** new_address_ptr);

extern void jvmtiEventClassFileLoadHookEvent(jvmtiEnv *jvmti_env,
                                                  JNIEnv* jni_env,
                                                  jclass class_being_redefined,
                                                  jobject loader,
                                                  const char* name,
                                                  jobject protection_domain,
                                                  jint class_data_len,
                                                  const unsigned char* class_data,
                                                  jint* new_class_data_len,
                                                  unsigned char** new_class_data);

jvmtiEventCallbacks generateDefaultCallbacks() {
	jvmtiEventCallbacks callbacks = {NULL};
	memset(&callbacks, 0, sizeof(callbacks));
    callbacks.VMInit = &jvmtiEventVMInitEvent;
    callbacks.NativeMethodBind = &jvmtiEventNativeMethodBindEvent;
    callbacks.ClassFileLoadHook = &jvmtiEventClassFileLoadHookEvent;
//    callbacks.MethodExit = &jvmtiEventMethodExitEvent;
//    callbacks.SingleStep = &jvmtiEventSingleStepEvent;



//callbacks.VMDeath = &jvmtiEventVMDeathEvent;
//callbacks.ThreadStart = &jvmtiEventThreadStartEvent;
//callbacks.ThreadEnd = &jvmtiEventThreadEndEvent;

//callbacks.ClassLoad = &jvmtiEventClassLoadEvent;
//callbacks.ClassPrepare = &jvmtiEventClassPrepareEvent;
//callbacks.VMStart = &jvmtiEventVMStartEvent;

//callbacks.FramePop = &jvmtiEventFramePopEvent;
//callbacks.Breakpoint = &jvmtiEventBreakpointEvent;
//callbacks.FieldAccess = &jvmtiEventFieldAccessEvent;
//callbacks.FieldModification = &jvmtiEventFieldModificationEvent;
//callbacks.MethodEntry = &jvmtiEventMethodEntryEvent;

//callbacks.CompiledMethodLoad = &jvmtiEventCompiledMethodLoadEvent;
//callbacks.CompiledMethodUnload = &jvmtiEventCompiledMethodUnloadEvent;
//callbacks.DynamicCodeGenerated = &jvmtiEventDynamicCodeGeneratedEvent;
//callbacks.DataDumpRequest = &jvmtiEventDataDumpRequestEvent;
//callbacks.MonitorWait = &jvmtiEventMonitorWaitEvent;
//callbacks.MonitorWaited = &jvmtiEventMonitorWaitedEvent;
//callbacks.MonitorContendedEnter = &jvmtiEventMonitorContendedEnterEvent;
//callbacks.MonitorContendedEntered = &jvmtiEventMonitorContendedEnteredEvent;
//callbacks.ResourceExhausted = &jvmtiEventResourceExhaustedEvent;
//callbacks.GarbageCollectionStart = &jvmtiEventGarbageCollectionStartEvent;
//callbacks.GarbageCollectionFinish = &jvmtiEventGarbageCollectionFinishEvent;
//callbacks.ObjectFree = &jvmtiEventObjectFreeEvent;
//callbacks.VMObjectAlloc = &jvmtiEventVMObjectAllocEvent;
    gjavaVMGlob->callbackss = callbacks;
	return callbacks;
}


//////////////////////////////////////JVMTI FUNCTIONS///////////////////////////////////////
jvmtiCapabilities GetPotentialCapabilities() {
  jvmtiCapabilities capabilities;
 (void)memset(&capabilities,0, sizeof(capabilities));
 (*(gdata->jvmti))->GetPotentialCapabilities(gdata->jvmti, &capabilities);
  return capabilities;
}

extern jvmtiError checkEx(jvmtiError errCode, char* fname);

jvmtiError Allocate(jlong size, unsigned char** mem_ptr) {
    return checkEx((*(gdata->jvmti))->Allocate(gdata->jvmti, size, mem_ptr),"Allocate");
}
jvmtiError GetClassSignature(jclass klass,
          char** signature_ptr,
          char** generic_ptr) {
  return checkEx((*(gdata->jvmti))->GetClassSignature(gdata->jvmti, klass, signature_ptr, generic_ptr),"GetClassSignature");
}
jvmtiError Deallocate(unsigned char* mem) {
  return checkEx((*(gdata->jvmti))->Deallocate(gdata->jvmti, mem),"Deallocate");
}
jvmtiError GetThreadState(jthread thread,
          jint* thread_state_ptr) {
  return checkEx((*(gdata->jvmti))->GetThreadState(gdata->jvmti, thread, thread_state_ptr),"GetThreadState");
}
jvmtiError GetCurrentThread(jthread* thread_ptr) {
  return checkEx((*(gdata->jvmti))->GetCurrentThread(gdata->jvmti, thread_ptr),"GetCurrentThread");
}
jvmtiError GetAllThreads(jint* threads_count_ptr,
          jthread** threads_ptr) {
  return checkEx((*(gdata->jvmti))->GetAllThreads(gdata->jvmti, threads_count_ptr, threads_ptr),"GetAllThreads");
}
jvmtiError SuspendThread(jthread thread) {
  return checkEx((*(gdata->jvmti))->SuspendThread(gdata->jvmti, thread),"SuspendThread");
}
jvmtiError SuspendThreadList(jint request_count,
          const jthread* request_list,
          jvmtiError* results) {
  return checkEx((*(gdata->jvmti))->SuspendThreadList(gdata->jvmti, request_count, request_list, results),"SuspendThreadList");
}
jvmtiError ResumeThread(jthread thread) {
  return checkEx((*(gdata->jvmti))->ResumeThread(gdata->jvmti, thread),"ResumeThread");
}
jvmtiError ResumeThreadList(jint request_count,
          const jthread* request_list,
          jvmtiError* results) {
  return checkEx((*(gdata->jvmti))->ResumeThreadList(gdata->jvmti, request_count, request_list, results),"ResumeThreadList");
}
jvmtiError StopThread(jthread thread,
          jobject exception) {
  return checkEx((*(gdata->jvmti))->StopThread(gdata->jvmti, thread, exception),"StopThread");
}
jvmtiError InterruptThread(jthread thread) {
  return checkEx((*(gdata->jvmti))->InterruptThread(gdata->jvmti, thread),"InterruptThread");
}
jvmtiError GetThreadInfo(jthread thread,
          jvmtiThreadInfo* info_ptr) {
  return checkEx((*(gdata->jvmti))->GetThreadInfo(gdata->jvmti, thread, info_ptr),"GetThreadInfo");
}
jvmtiError GetOwnedMonitorInfo(jthread thread,
          jint* owned_monitor_count_ptr,
          jobject** owned_monitors_ptr) {
  return checkEx((*(gdata->jvmti))->GetOwnedMonitorInfo(gdata->jvmti, thread, owned_monitor_count_ptr, owned_monitors_ptr),"GetOwnedMonitorInfo");
}
jvmtiError GetOwnedMonitorStackDepthInfo(jthread thread,
          jint* monitor_info_count_ptr,
          jvmtiMonitorStackDepthInfo** monitor_info_ptr) {
  return checkEx((*(gdata->jvmti))->GetOwnedMonitorStackDepthInfo(gdata->jvmti, thread, monitor_info_count_ptr, monitor_info_ptr),"GetOwnedMonitorStackDepthInfo");
}
jvmtiError GetCurrentContendedMonitor(jthread thread,
          jobject* monitor_ptr) {
  return checkEx((*(gdata->jvmti))->GetCurrentContendedMonitor(gdata->jvmti, thread, monitor_ptr),"GetCurrentContendedMonitor");
}
jvmtiError RunAgentThread(jthread thread,
          jvmtiStartFunction proc,
          const void* arg,
          jint priority) {
  return checkEx((*(gdata->jvmti))->RunAgentThread(gdata->jvmti, thread, proc, arg, priority),"RunAgentThread");
}
jvmtiError SetThreadLocalStorage(jthread thread,
          const void* data) {
  return checkEx((*(gdata->jvmti))->SetThreadLocalStorage(gdata->jvmti, thread, data),"SetThreadLocalStorage");
}
jvmtiError GetThreadLocalStorage(jthread thread,
          void** data_ptr) {
  return checkEx((*(gdata->jvmti))->GetThreadLocalStorage(gdata->jvmti, thread, data_ptr),"GetThreadLocalStorage");
}
jvmtiError GetTopThreadGroups(jint* group_count_ptr,
          jthreadGroup** groups_ptr) {
  return checkEx((*(gdata->jvmti))->GetTopThreadGroups(gdata->jvmti, group_count_ptr, groups_ptr),"GetTopThreadGroups");
}
jvmtiError GetThreadGroupInfo(jthreadGroup group,
          jvmtiThreadGroupInfo* info_ptr) {
  return checkEx((*(gdata->jvmti))->GetThreadGroupInfo(gdata->jvmti, group, info_ptr),"GetThreadGroupInfo");
}
jvmtiError GetThreadGroupChildren(jthreadGroup group,
          jint* thread_count_ptr,
          jthread** threads_ptr,
          jint* group_count_ptr,
          jthreadGroup** groups_ptr) {
  return checkEx((*(gdata->jvmti))->GetThreadGroupChildren(gdata->jvmti, group, thread_count_ptr, threads_ptr, group_count_ptr, groups_ptr),"GetThreadGroupChildren");
}
jvmtiError GetStackTrace(jthread thread,
          jint start_depth,
          jint max_frame_count,
          jvmtiFrameInfo* frame_buffer,
          jint* count_ptr) {
  return checkEx((*(gdata->jvmti))->GetStackTrace(gdata->jvmti, thread, start_depth, max_frame_count, frame_buffer, count_ptr),"GetStackTrace");
}
jvmtiError GetAllStackTraces(jint max_frame_count,
          jvmtiStackInfo** stack_info_ptr,
          jint* thread_count_ptr) {
  return checkEx((*(gdata->jvmti))->GetAllStackTraces(gdata->jvmti, max_frame_count, stack_info_ptr, thread_count_ptr),"GetAllStackTraces");
}
jvmtiError GetThreadListStackTraces(jint thread_count,
          const jthread* thread_list,
          jint max_frame_count,
          jvmtiStackInfo** stack_info_ptr) {
  return checkEx((*(gdata->jvmti))->GetThreadListStackTraces(gdata->jvmti, thread_count, thread_list, max_frame_count, stack_info_ptr),"GetThreadListStackTraces");
}
jvmtiError GetFrameCount(jthread thread,
          jint* count_ptr) {
  return checkEx((*(gdata->jvmti))->GetFrameCount(gdata->jvmti, thread, count_ptr),"GetFrameCount");
}
jvmtiError PopFrame(jthread thread) {
  return checkEx((*(gdata->jvmti))->PopFrame(gdata->jvmti, thread),"PopFrame");
}
jvmtiError GetFrameLocation(jthread thread,
          jint depth,
          jmethodID* method_ptr,
          jlocation* location_ptr) {
  return checkEx((*(gdata->jvmti))->GetFrameLocation(gdata->jvmti, thread, depth, method_ptr, location_ptr),"GetFrameLocation");
}
jvmtiError NotifyFramePop(jthread thread,
          jint depth) {
  return checkEx((*(gdata->jvmti))->NotifyFramePop(gdata->jvmti, thread, depth),"NotifyFramePop");
}
jvmtiError ForceEarlyReturnObject(jthread thread,
          jobject value) {
  return checkEx((*(gdata->jvmti))->ForceEarlyReturnObject(gdata->jvmti, thread, value),"ForceEarlyReturnObject");
}
jvmtiError ForceEarlyReturnInt(jthread thread,
          jint value) {
  return checkEx((*(gdata->jvmti))->ForceEarlyReturnInt(gdata->jvmti, thread, value),"ForceEarlyReturnInt");
}
jvmtiError ForceEarlyReturnLong(jthread thread,
          jlong value) {
  return checkEx((*(gdata->jvmti))->ForceEarlyReturnLong(gdata->jvmti, thread, value),"ForceEarlyReturnLong");
}
jvmtiError ForceEarlyReturnFloat(jthread thread,
          jfloat value) {
  return checkEx((*(gdata->jvmti))->ForceEarlyReturnFloat(gdata->jvmti, thread, value),"ForceEarlyReturnFloat");
}
jvmtiError ForceEarlyReturnDouble(jthread thread,
    jdouble value) {
    return checkEx((*(gdata->jvmti))->ForceEarlyReturnDouble(gdata->jvmti, thread, value),"ForceEarlyReturnDouble");
}
jvmtiError ForceEarlyReturnVoid(jthread thread) {
    return checkEx((*(gdata->jvmti))->ForceEarlyReturnVoid(gdata->jvmti, thread),"ForceEarlyReturnVoid");
}
jvmtiError FollowReferences(jint heap_filter,
jclass klass,
jobject initial_object,
const jvmtiHeapCallbacks* callbacks,
const void* user_data) {
    return checkEx((*(gdata->jvmti))->FollowReferences(gdata->jvmti, heap_filter, klass, initial_object, callbacks, user_data),"FollowReferences");
}
jvmtiError IterateThroughHeap(jint heap_filter,
jclass klass,
const jvmtiHeapCallbacks* callbacks,
const void* user_data) {
    return checkEx((*(gdata->jvmti))->IterateThroughHeap(gdata->jvmti, heap_filter, klass, callbacks, user_data),"IterateThroughHeap");
}
jvmtiError GetTag(jobject object,
jlong* tag_ptr) {
    return checkEx((*(gdata->jvmti))->GetTag(gdata->jvmti, object, tag_ptr),"GetTag");
}
jvmtiError SetTag(jobject object,
jlong tag) {
    return checkEx((*(gdata->jvmti))->SetTag(gdata->jvmti, object, tag),"SetTag");
}
jvmtiError GetObjectsWithTags(jint tag_count,
const jlong* tags,
jint* count_ptr,
jobject** object_result_ptr,
jlong** tag_result_ptr) {
    return checkEx((*(gdata->jvmti))->GetObjectsWithTags(gdata->jvmti, tag_count, tags, count_ptr, object_result_ptr, tag_result_ptr),"GetObjectsWithTags");
}
jvmtiError ForceGarbageCollection() {
    return checkEx((*(gdata->jvmti))->ForceGarbageCollection(jvmti()),"ForceGarbageCollection(jvmti");
}
jvmtiError IterateOverObjectsReachableFromObject(jobject object,
jvmtiObjectReferenceCallback object_reference_callback,
const void* user_data) {
    return checkEx((*(gdata->jvmti))->IterateOverObjectsReachableFromObject(gdata->jvmti, object, object_reference_callback, user_data),"IterateOverObjectsReachableFromObject");
}
jvmtiError IterateOverReachableObjects(jvmtiHeapRootCallback heap_root_callback,
jvmtiStackReferenceCallback stack_ref_callback,
jvmtiObjectReferenceCallback object_ref_callback,
const void* user_data) {
    return checkEx((*(gdata->jvmti))->IterateOverReachableObjects(gdata->jvmti, heap_root_callback, stack_ref_callback, object_ref_callback, user_data),"IterateOverReachableObjects");
}
jvmtiError IterateOverHeap(jvmtiHeapObjectFilter object_filter,
jvmtiHeapObjectCallback heap_object_callback,
const void* user_data) {
    return checkEx((*(gdata->jvmti))->IterateOverHeap(gdata->jvmti, object_filter, heap_object_callback, user_data),"IterateOverHeap");
}
jvmtiError IterateOverInstancesOfClass(jclass klass,
jvmtiHeapObjectFilter object_filter,
jvmtiHeapObjectCallback heap_object_callback,
const void* user_data) {
    return checkEx((*(gdata->jvmti))->IterateOverInstancesOfClass(gdata->jvmti, klass, object_filter, heap_object_callback, user_data),"IterateOverInstancesOfClass");
}
jvmtiError GetLocalObject(jthread thread,
jint depth,
jint slot,
jobject* value_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalObject(gdata->jvmti, thread, depth, slot, value_ptr),"GetLocalObject");
}
jvmtiError GetLocalInstance(jthread thread,
jint depth,
jobject* value_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalInstance(gdata->jvmti, thread, depth, value_ptr),"GetLocalInstance");
}
jvmtiError GetLocalInt(jthread thread,
jint depth,
jint slot,
jint* value_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalInt(gdata->jvmti, thread, depth, slot, value_ptr),"GetLocalInt");
}
jvmtiError GetLocalLong(jthread thread,
jint depth,
jint slot,
jlong* value_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalLong(gdata->jvmti, thread, depth, slot, value_ptr),"GetLocalLong");
}
jvmtiError GetLocalFloat(jthread thread,
jint depth,
jint slot,
jfloat* value_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalFloat(gdata->jvmti, thread, depth, slot, value_ptr),"GetLocalFloat");
}
jvmtiError GetLocalDouble(jthread thread,
jint depth,
jint slot,
jdouble* value_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalDouble(gdata->jvmti, thread, depth, slot, value_ptr),"GetLocalDouble");
}
jvmtiError SetLocalObject(jthread thread,
jint depth,
jint slot,
jobject value) {
    return checkEx((*(gdata->jvmti))->SetLocalObject(gdata->jvmti, thread, depth, slot, value),"SetLocalObject");
}
jvmtiError SetLocalInt(jthread thread,
jint depth,
jint slot,
jint value) {
    return checkEx((*(gdata->jvmti))->SetLocalInt(gdata->jvmti, thread, depth, slot, value),"SetLocalInt");
}
jvmtiError SetLocalLong(jthread thread,
jint depth,
jint slot,
jlong value) {
    return checkEx((*(gdata->jvmti))->SetLocalLong(gdata->jvmti, thread, depth, slot, value),"SetLocalLong");
}
jvmtiError SetLocalFloat(jthread thread,
jint depth,
jint slot,
jfloat value) {
    return checkEx((*(gdata->jvmti))->SetLocalFloat(gdata->jvmti, thread, depth, slot, value),"SetLocalFloat");
}
jvmtiError SetLocalDouble(jthread thread,
jint depth,
jint slot,
jdouble value) {
    return checkEx((*(gdata->jvmti))->SetLocalDouble(gdata->jvmti, thread, depth, slot, value),"SetLocalDouble");
}
jvmtiError SetBreakpoint(jmethodID method,
jlocation location) {
    return checkEx((*(gdata->jvmti))->SetBreakpoint(gdata->jvmti, method, location),"SetBreakpoint");
}
jvmtiError ClearBreakpoint(jmethodID method,
jlocation location) {
    return checkEx((*(gdata->jvmti))->ClearBreakpoint(gdata->jvmti, method, location),"ClearBreakpoint");
}
jvmtiError SetFieldAccessWatch(jclass klass,
jfieldID field) {
    return checkEx((*(gdata->jvmti))->SetFieldAccessWatch(gdata->jvmti, klass, field),"SetFieldAccessWatch");
}
jvmtiError ClearFieldAccessWatch(jclass klass,
jfieldID field) {
    return checkEx((*(gdata->jvmti))->ClearFieldAccessWatch(gdata->jvmti, klass, field),"ClearFieldAccessWatch");
}
jvmtiError SetFieldModificationWatch(jclass klass,
jfieldID field) {
    return checkEx((*(gdata->jvmti))->SetFieldModificationWatch(gdata->jvmti, klass, field),"SetFieldModificationWatch");
}
jvmtiError ClearFieldModificationWatch(jclass klass,
jfieldID field) {
    return checkEx((*(gdata->jvmti))->ClearFieldModificationWatch(gdata->jvmti, klass, field),"ClearFieldModificationWatch");
}
jvmtiError GetLoadedClasses(jint* class_count_ptr,
jclass** classes_ptr) {
    return checkEx((*(gdata->jvmti))->GetLoadedClasses(gdata->jvmti, class_count_ptr, classes_ptr),"GetLoadedClasses");
}
jvmtiError GetClassLoaderClasses(jobject initiating_loader,
jint* class_count_ptr,
jclass** classes_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassLoaderClasses(gdata->jvmti, initiating_loader, class_count_ptr, classes_ptr),"GetClassLoaderClasses");
}
jvmtiError GetClassStatus(jclass klass,
jint* status_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassStatus(gdata->jvmti, klass, status_ptr),"GetClassStatus");
}
jvmtiError GetSourceFileName(jclass klass,
char** source_name_ptr) {
    return checkEx((*(gdata->jvmti))->GetSourceFileName(gdata->jvmti, klass, source_name_ptr),"GetSourceFileName");
}
jvmtiError GetClassModifiers(jclass klass,
jint* modifiers_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassModifiers(gdata->jvmti, klass, modifiers_ptr),"GetClassModifiers");
}
jvmtiError GetClassMethods(jclass klass,
jint* method_count_ptr,
jmethodID** methods_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassMethods(gdata->jvmti, klass, method_count_ptr, methods_ptr),"GetClassMethods");
}
jvmtiError GetClassFields(jclass klass,
jint* field_count_ptr,
jfieldID** fields_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassFields(gdata->jvmti, klass, field_count_ptr, fields_ptr),"GetClassFields");
}
jvmtiError GetImplementedInterfaces(jclass klass,
jint* interface_count_ptr,
jclass** interfaces_ptr) {
    return checkEx((*(gdata->jvmti))->GetImplementedInterfaces(gdata->jvmti, klass, interface_count_ptr, interfaces_ptr),"GetImplementedInterfaces");
}
jvmtiError GetClassVersionNumbers(jclass klass,
jint* minor_version_ptr,
jint* major_version_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassVersionNumbers(gdata->jvmti, klass, minor_version_ptr, major_version_ptr),"GetClassVersionNumbers");
}
jvmtiError GetConstantPool(jclass klass,
jint* constant_pool_count_ptr,
jint* constant_pool_byte_count_ptr,
unsigned char** constant_pool_bytes_ptr) {
    return checkEx((*(gdata->jvmti))->GetConstantPool(gdata->jvmti, klass, constant_pool_count_ptr, constant_pool_byte_count_ptr, constant_pool_bytes_ptr),"GetConstantPool");
}
jvmtiError IsInterface(jclass klass,
jboolean* is_interface_ptr) {
    return checkEx((*(gdata->jvmti))->IsInterface(gdata->jvmti, klass, is_interface_ptr),"IsInterface");
}
jvmtiError IsArrayClass(jclass klass,
jboolean* is_array_class_ptr) {
    return checkEx((*(gdata->jvmti))->IsArrayClass(gdata->jvmti, klass, is_array_class_ptr),"IsArrayClass");
}
jvmtiError IsModifiableClass(jclass klass,
jboolean* is_modifiable_class_ptr) {
    return checkEx((*(gdata->jvmti))->IsModifiableClass(gdata->jvmti, klass, is_modifiable_class_ptr),"IsModifiableClass");
}
jvmtiError GetClassLoader(jclass klass,
jobject* classloader_ptr) {
    return checkEx((*(gdata->jvmti))->GetClassLoader(gdata->jvmti, klass, classloader_ptr),"GetClassLoader");
}
jvmtiError GetSourceDebugExtension(jclass klass,
char** source_debug_extension_ptr) {
    return checkEx((*(gdata->jvmti))->GetSourceDebugExtension(gdata->jvmti, klass, source_debug_extension_ptr),"GetSourceDebugExtension");
}
jvmtiError RetransformClasses(jint class_count,
const jclass* classes) {
    return checkEx((*(gdata->jvmti))->RetransformClasses(gdata->jvmti, class_count, classes),"RetransformClasses");
}
jvmtiError RedefineClasses(jint class_count,
const jvmtiClassDefinition* class_definitions) {
    return checkEx((*(gdata->jvmti))->RedefineClasses(gdata->jvmti, class_count, class_definitions),"RedefineClasses");
}
jvmtiError GetObjectSize(jobject object,
jlong* size_ptr) {
    return checkEx((*(gdata->jvmti))->GetObjectSize(gdata->jvmti, object, size_ptr),"GetObjectSize");
}
jvmtiError GetObjectHashCode(jobject object,
jint* hash_code_ptr) {
    return checkEx((*(gdata->jvmti))->GetObjectHashCode(gdata->jvmti, object, hash_code_ptr),"GetObjectHashCode");
}
jvmtiError GetObjectMonitorUsage(jobject object,
jvmtiMonitorUsage* info_ptr) {
    return checkEx((*(gdata->jvmti))->GetObjectMonitorUsage(gdata->jvmti, object, info_ptr),"GetObjectMonitorUsage");
}
jvmtiError GetFieldName(jclass klass,
jfieldID field,
char** name_ptr,
char** signature_ptr,
char** generic_ptr) {
    return checkEx((*(gdata->jvmti))->GetFieldName(gdata->jvmti, klass, field, name_ptr, signature_ptr, generic_ptr),"GetFieldName");
}
jvmtiError GetFieldDeclaringClass(jclass klass,
jfieldID field,
jclass* declaring_class_ptr) {
    return checkEx((*(gdata->jvmti))->GetFieldDeclaringClass(gdata->jvmti, klass, field, declaring_class_ptr),"GetFieldDeclaringClass");
}
jvmtiError GetFieldModifiers(jclass klass,
jfieldID field,
jint* modifiers_ptr) {
    return checkEx((*(gdata->jvmti))->GetFieldModifiers(gdata->jvmti, klass, field, modifiers_ptr),"GetFieldModifiers");
}
jvmtiError IsFieldSynthetic(jclass klass,
jfieldID field,
jboolean* is_synthetic_ptr) {
    return checkEx((*(gdata->jvmti))->IsFieldSynthetic(gdata->jvmti, klass, field, is_synthetic_ptr),"IsFieldSynthetic");
}
jvmtiError GetMethodName(jmethodID method,
char** name_ptr,
char** signature_ptr,
char** generic_ptr) {
    return checkEx((*(gdata->jvmti))->GetMethodName(gdata->jvmti, method, name_ptr, signature_ptr, generic_ptr),"GetMethodName");
}
jvmtiError GetMethodDeclaringClass(jmethodID method,
jclass* declaring_class_ptr) {
    return checkEx((*(gdata->jvmti))->GetMethodDeclaringClass(gdata->jvmti, method, declaring_class_ptr),"GetMethodDeclaringClass");
}
jvmtiError GetMethodModifiers(jmethodID method,
jint* modifiers_ptr) {
    return checkEx((*(gdata->jvmti))->GetMethodModifiers(gdata->jvmti, method, modifiers_ptr),"GetMethodModifiers");
}
jvmtiError GetMaxLocals(jmethodID method,
jint* max_ptr) {
    return checkEx((*(gdata->jvmti))->GetMaxLocals(gdata->jvmti, method, max_ptr),"GetMaxLocals");
}
jvmtiError GetArgumentsSize(jmethodID method,
jint* size_ptr) {
    return checkEx((*(gdata->jvmti))->GetArgumentsSize(gdata->jvmti, method, size_ptr),"GetArgumentsSize");
}
jvmtiError GetLineNumberTable(jmethodID method,
jint* entry_count_ptr,
jvmtiLineNumberEntry** table_ptr) {
    return checkEx((*(gdata->jvmti))->GetLineNumberTable(gdata->jvmti, method, entry_count_ptr, table_ptr),"GetLineNumberTable");
}
jvmtiError GetMethodLocation(jmethodID method,
jlocation* start_location_ptr,
jlocation* end_location_ptr) {
    return checkEx((*(gdata->jvmti))->GetMethodLocation(gdata->jvmti, method, start_location_ptr, end_location_ptr),"GetMethodLocation");
}
jvmtiError GetLocalVariableTable(jmethodID method,
jint* entry_count_ptr,
jvmtiLocalVariableEntry** table_ptr) {
    return checkEx((*(gdata->jvmti))->GetLocalVariableTable(gdata->jvmti, method, entry_count_ptr, table_ptr),"GetLocalVariableTable");
}
jvmtiError GetBytecodes(jmethodID method,
jint* bytecode_count_ptr,
unsigned char** bytecodes_ptr) {
    return checkEx((*(gdata->jvmti))->GetBytecodes(gdata->jvmti, method, bytecode_count_ptr, bytecodes_ptr),"GetBytecodes");
}
jvmtiError IsMethodNative(jmethodID method,
jboolean* is_native_ptr) {
    return checkEx((*(gdata->jvmti))->IsMethodNative(gdata->jvmti, method, is_native_ptr),"IsMethodNative");
}
jvmtiError IsMethodSynthetic(jmethodID method,
jboolean* is_synthetic_ptr) {
    return checkEx((*(gdata->jvmti))->IsMethodSynthetic(gdata->jvmti, method, is_synthetic_ptr),"IsMethodSynthetic");
}
jvmtiError IsMethodObsolete(jmethodID method,
jboolean* is_obsolete_ptr) {
    return checkEx((*(gdata->jvmti))->IsMethodObsolete(gdata->jvmti, method, is_obsolete_ptr),"IsMethodObsolete");
}
jvmtiError SetNativeMethodPrefix(const char* prefix) {
    return checkEx((*(gdata->jvmti))->SetNativeMethodPrefix(gdata->jvmti, prefix),"SetNativeMethodPrefix");
}
jvmtiError SetNativeMethodPrefixes(jint prefix_count,
char** prefixes) {
    return checkEx((*(gdata->jvmti))->SetNativeMethodPrefixes(gdata->jvmti, prefix_count, prefixes),"SetNativeMethodPrefixes");
}
jvmtiError CreateRawMonitor(const char* name,
jrawMonitorID* monitor_ptr) {
    return checkEx((*(gdata->jvmti))->CreateRawMonitor(gdata->jvmti, name, monitor_ptr),"CreateRawMonitor");
}
jvmtiError DestroyRawMonitor(jrawMonitorID monitor) {
    return checkEx((*(gdata->jvmti))->DestroyRawMonitor(gdata->jvmti, monitor),"DestroyRawMonitor");
}
jvmtiError RawMonitorEnter(jrawMonitorID monitor) {
    return checkEx((*(gdata->jvmti))->RawMonitorEnter(gdata->jvmti, monitor),"RawMonitorEnter");
}
jvmtiError RawMonitorExit(jrawMonitorID monitor) {
    return checkEx((*(gdata->jvmti))->RawMonitorExit(gdata->jvmti, monitor),"RawMonitorExit");
}
jvmtiError RawMonitorWait(jrawMonitorID monitor,
jlong millis) {
    return checkEx((*(gdata->jvmti))->RawMonitorWait(gdata->jvmti, monitor, millis),"RawMonitorWait");
}
jvmtiError RawMonitorNotify(jrawMonitorID monitor) {
    return checkEx((*(gdata->jvmti))->RawMonitorNotify(gdata->jvmti, monitor),"RawMonitorNotify");
}
jvmtiError RawMonitorNotifyAll(jrawMonitorID monitor) {
    return checkEx((*(gdata->jvmti))->RawMonitorNotifyAll(gdata->jvmti, monitor),"RawMonitorNotifyAll");
}
jvmtiError SetJNIFunctionTable(const jniNativeInterface* function_table) {
    return checkEx((*(gdata->jvmti))->SetJNIFunctionTable(gdata->jvmti, function_table),"SetJNIFunctionTable");
}
jvmtiError GetJNIFunctionTable(jniNativeInterface** function_table) {
    return checkEx((*(gdata->jvmti))->GetJNIFunctionTable(gdata->jvmti, function_table),"GetJNIFunctionTable");
}
jvmtiError SetEventCallbacks(const jvmtiEventCallbacks* callbacks,
jint size_of_callbacks) {
    return checkEx((*(gdata->jvmti))->SetEventCallbacks(gdata->jvmti, callbacks, size_of_callbacks),"SetEventCallbacks");
}
jvmtiError SetEventNotificationMode(jvmtiEventMode mode,
jvmtiEvent event_type,
jthread event_thread,
...) {
    return checkEx((*(gdata->jvmti))->SetEventNotificationMode(gdata->jvmti, mode, event_type, event_thread),"SetEventNotificationMode");
}
jvmtiError GenerateEvents(jvmtiEvent event_type) {
    return checkEx((*(gdata->jvmti))->GenerateEvents(gdata->jvmti, event_type),"GenerateEvents");
}
jvmtiError GetExtensionFunctions(jint* extension_count_ptr,
jvmtiExtensionFunctionInfo** extensions) {
    return checkEx((*(gdata->jvmti))->GetExtensionFunctions(gdata->jvmti, extension_count_ptr, extensions),"GetExtensionFunctions");
}
jvmtiError GetExtensionEvents(jint* extension_count_ptr,
jvmtiExtensionEventInfo** extensions) {
    return checkEx((*(gdata->jvmti))->GetExtensionEvents(gdata->jvmti, extension_count_ptr, extensions),"GetExtensionEvents");
}
jvmtiError SetExtensionEventCallback(jint extension_event_index,
jvmtiExtensionEvent callback) {
    return checkEx((*(gdata->jvmti))->SetExtensionEventCallback(gdata->jvmti, extension_event_index, callback),"SetExtensionEventCallback");
}
jvmtiError AddCapabilities(const jvmtiCapabilities* capabilities_ptr) {
    return checkEx((*(gdata->jvmti))->AddCapabilities(gdata->jvmti, capabilities_ptr),"AddCapabilities");
}
jvmtiError RelinquishCapabilities(const jvmtiCapabilities* capabilities_ptr) {
    return checkEx((*(gdata->jvmti))->RelinquishCapabilities(gdata->jvmti, capabilities_ptr),"RelinquishCapabilities");
}
jvmtiError GetCapabilities(jvmtiCapabilities* capabilities_ptr) {
    return checkEx((*(gdata->jvmti))->GetCapabilities(gdata->jvmti, capabilities_ptr),"GetCapabilities");
}
jvmtiError GetCurrentThreadCpuTimerInfo(jvmtiTimerInfo* info_ptr) {
    return checkEx((*(gdata->jvmti))->GetCurrentThreadCpuTimerInfo(gdata->jvmti, info_ptr),"GetCurrentThreadCpuTimerInfo");
}
jvmtiError GetCurrentThreadCpuTime(jlong* nanos_ptr) {
    return checkEx((*(gdata->jvmti))->GetCurrentThreadCpuTime(gdata->jvmti, nanos_ptr),"GetCurrentThreadCpuTime");
}
jvmtiError GetThreadCpuTimerInfo(jvmtiTimerInfo* info_ptr) {
    return checkEx((*(gdata->jvmti))->GetThreadCpuTimerInfo(gdata->jvmti, info_ptr),"GetThreadCpuTimerInfo");
}
jvmtiError GetThreadCpuTime(jthread thread,
jlong* nanos_ptr) {
    return checkEx((*(gdata->jvmti))->GetThreadCpuTime(gdata->jvmti, thread, nanos_ptr),"GetThreadCpuTime");
}
jvmtiError GetTimerInfo(jvmtiTimerInfo* info_ptr) {
    return checkEx((*(gdata->jvmti))->GetTimerInfo(gdata->jvmti, info_ptr),"GetTimerInfo");
}
jvmtiError GetTime(jlong* nanos_ptr) {
    return checkEx((*(gdata->jvmti))->GetTime(gdata->jvmti, nanos_ptr),"GetTime");
}
jvmtiError GetAvailableProcessors(jint* processor_count_ptr) {
    return checkEx((*(gdata->jvmti))->GetAvailableProcessors(gdata->jvmti, processor_count_ptr),"GetAvailableProcessors");
}
jvmtiError AddToBootstrapClassLoaderSearch(const char* segment) {
    return checkEx((*(gdata->jvmti))->AddToBootstrapClassLoaderSearch(gdata->jvmti, segment),"AddToBootstrapClassLoaderSearch");
}
jvmtiError AddToSystemClassLoaderSearch(const char* segment) {
    return checkEx((*(gdata->jvmti))->AddToSystemClassLoaderSearch(gdata->jvmti, segment),"AddToSystemClassLoaderSearch");
}
jvmtiError GetSystemProperties(jint* count_ptr,
char*** property_ptr) {
    return checkEx((*(gdata->jvmti))->GetSystemProperties(gdata->jvmti, count_ptr, property_ptr),"GetSystemProperties");
}
jvmtiError GetSystemProperty(const char* property,
char** value_ptr) {
    return checkEx((*(gdata->jvmti))->GetSystemProperty(gdata->jvmti, property, value_ptr),"GetSystemProperty");
}
jvmtiError SetSystemProperty(const char* property,
const char* value) {
    return checkEx((*(gdata->jvmti))->SetSystemProperty(gdata->jvmti, property, value),"SetSystemProperty");
}
jvmtiError GetPhase(jvmtiPhase* phase_ptr) {
    return checkEx((*(gdata->jvmti))->GetPhase(gdata->jvmti, phase_ptr),"GetPhase");
}
jvmtiError DisposeEnvironment() {
    return checkEx((*(gdata->jvmti))->DisposeEnvironment(jvmti()),"DisposeEnvironment(jvmti");
}
jvmtiError SetEnvironmentLocalStorage(const void* data) {
    return checkEx((*(gdata->jvmti))->SetEnvironmentLocalStorage(gdata->jvmti, data),"SetEnvironmentLocalStorage");
}
jvmtiError GetEnvironmentLocalStorage(void** data_ptr) {
    return checkEx((*(gdata->jvmti))->GetEnvironmentLocalStorage(gdata->jvmti, data_ptr),"GetEnvironmentLocalStorage");
}
jvmtiError GetVersionNumber(jint* version_ptr) {
    return checkEx((*(gdata->jvmti))->GetVersionNumber(gdata->jvmti, version_ptr),"GetVersionNumber");
}
jvmtiError GetErrorName(jvmtiError error,
char** name_ptr) {
    return checkEx((*(gdata->jvmti))->GetErrorName(gdata->jvmti, error, name_ptr),"GetErrorName");
}
jvmtiError SetVerboseFlag(jvmtiVerboseFlag flag,
jboolean value) {
    return checkEx((*(gdata->jvmti))->SetVerboseFlag(gdata->jvmti, flag, value),"SetVerboseFlag");
}
jvmtiError GetJLocationFormat(jvmtiJlocationFormat* format_ptr) {
    return checkEx((*(gdata->jvmti))->GetJLocationFormat(gdata->jvmti, format_ptr),"GetJLocationFormat");
}

//////////////////////////////////////JNI FUNCTIONS///////////////////////////////////////
extern JNIEnv * currentEnvs();

jint GetVersion() {
        jint variable = (*currentEnvs())->GetVersion(currentEnvs());
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jclass DefineClass(const char *name, jobject loader, const jbyte *buf,
                       jsize len) {
        jclass variable = (*currentEnvs())->DefineClass(currentEnvs(), name, loader, buf, len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jclass FindClass(const char *name) {
        jclass variable = (*currentEnvs())->FindClass(currentEnvs(), name);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jmethodID FromReflectedMethod(jobject method) {
        jmethodID variable = (*currentEnvs())->FromReflectedMethod(currentEnvs(),method);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfieldID FromReflectedField(jobject field) {
        jfieldID variable = (*currentEnvs())->FromReflectedField(currentEnvs(),field);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject ToReflectedMethod(jclass cls, jmethodID methodID, jboolean isStatic) {
        jobject variable = (*currentEnvs())->ToReflectedMethod(currentEnvs(), cls, methodID, isStatic);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jclass GetSuperclass(jclass sub) {
        jclass variable = (*currentEnvs())->GetSuperclass(currentEnvs(), sub);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean IsAssignableFrom(jclass sub, jclass sup) {
        jboolean variable = (*currentEnvs())->IsAssignableFrom(currentEnvs(), sub, sup);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject ToReflectedField(jclass cls, jfieldID fieldID, jboolean isStatic) {
        jobject variable = (*currentEnvs())->ToReflectedField(currentEnvs(),cls,fieldID,isStatic);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint Throw(jthrowable obj) {
        jint variable = (*currentEnvs())->Throw(currentEnvs(), obj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint ThrowNew(jclass clazz, const char *msg) {
        jint variable = (*currentEnvs())->ThrowNew(currentEnvs(), clazz, msg);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jthrowable ExceptionOccurred() {
        jthrowable variable = (*currentEnvs())->ExceptionOccurred(currentEnvs());
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint PushLocalFrame(jint capacity) {
        jint variable = (*currentEnvs())->PushLocalFrame(currentEnvs(),capacity);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject PopLocalFrame(jobject result) {
        jobject variable = (*currentEnvs())->PopLocalFrame(currentEnvs(),result);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject NewGlobalRef(jobject lobj) {
        jobject variable = (*currentEnvs())->NewGlobalRef(currentEnvs(),lobj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean IsSameObject(jobject obj1, jobject obj2) {
        jboolean variable = (*currentEnvs())->IsSameObject(currentEnvs(),obj1,obj2);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject NewLocalRef(jobject ref) {
        jobject variable = (*currentEnvs())->NewLocalRef(currentEnvs(),ref);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint EnsureLocalCapacity(jint capacity) {
        jint variable = (*currentEnvs())->EnsureLocalCapacity(currentEnvs(),capacity);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject AllocObject(jclass clazz) {
        jobject variable = (*currentEnvs())->AllocObject(currentEnvs(),clazz);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject NewObject(jclass clazz, jmethodID methodID, ...) {
        va_list args;
        jobject result;
        va_start(args, methodID);
        result = (*currentEnvs())->NewObjectV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jobject variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject NewObjectV(jclass clazz, jmethodID methodID,
                       va_list args) {
        jobject variable = (*currentEnvs())->NewObjectV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject NewObjectA(jclass clazz, jmethodID methodID,
                       const jvalue *args) {
        jobject variable = (*currentEnvs())->NewObjectA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jclass GetObjectClass(jobject obj) {
        jclass variable = (*currentEnvs())->GetObjectClass(currentEnvs(),obj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean IsInstanceOf(jobject obj, jclass clazz) {
        jboolean variable = (*currentEnvs())->IsInstanceOf(currentEnvs(),obj,clazz);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jmethodID GetMethodID(jclass clazz, const char *name,
                          const char *sig) {
        jmethodID variable = (*currentEnvs())->GetMethodID(currentEnvs(),clazz,name,sig);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallObjectMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jobject result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallObjectMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jobject variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallObjectMethodV(jobject obj, jmethodID methodID,
                        va_list args) {
        jobject variable = (*currentEnvs())->CallObjectMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallObjectMethodA(jobject obj, jmethodID methodID,
                        const jvalue * args) {
        jobject variable = (*currentEnvs())->CallObjectMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallBooleanMethod(jobject obj,
                               jmethodID methodID, ...) {
        va_list args;
        jboolean result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallBooleanMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jboolean variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallBooleanMethodV(jobject obj, jmethodID methodID,
                                va_list args) {
        jboolean variable = (*currentEnvs())->CallBooleanMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallBooleanMethodA(jobject obj, jmethodID methodID,
                                const jvalue * args) {
        jboolean variable = (*currentEnvs())->CallBooleanMethodA(currentEnvs(),obj,methodID, args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallByteMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jbyte result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallByteMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jbyte variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallByteMethodV(jobject obj, jmethodID methodID,
                          va_list args) {
        jbyte variable = (*currentEnvs())->CallByteMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallByteMethodA(jobject obj, jmethodID methodID,
                          const jvalue * args) {
        jbyte variable = (*currentEnvs())->CallByteMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallCharMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jchar result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallCharMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jchar variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallCharMethodV(jobject obj, jmethodID methodID,
                          va_list args) {
        jchar variable = (*currentEnvs())->CallCharMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallCharMethodA(jobject obj, jmethodID methodID,
                          const jvalue * args) {
        jchar variable = (*currentEnvs())->CallCharMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallShortMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jshort result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallShortMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jshort variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallShortMethodV(jobject obj, jmethodID methodID,
                            va_list args) {
        jshort variable = (*currentEnvs())->CallShortMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallShortMethodA(jobject obj, jmethodID methodID,
                            const jvalue * args) {
        jshort variable = (*currentEnvs())->CallShortMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallIntMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jint result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallIntMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jint variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallIntMethodV(jobject obj, jmethodID methodID,
                        va_list args) {
        jint variable = (*currentEnvs())->CallIntMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallIntMethodA(jobject obj, jmethodID methodID,
                        const jvalue * args) {
        jint variable = (*currentEnvs())->CallIntMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallLongMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jlong result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallLongMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jlong variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallLongMethodV(jobject obj, jmethodID methodID,
                          va_list args) {
        jlong variable = (*currentEnvs())->CallLongMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallLongMethodA(jobject obj, jmethodID methodID,
                          const jvalue * args) {
        jlong variable = (*currentEnvs())->CallLongMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallFloatMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jfloat result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallFloatMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jfloat variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallFloatMethodV(jobject obj, jmethodID methodID,
                            va_list args) {
        jfloat variable = (*currentEnvs())->CallFloatMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallFloatMethodA(jobject obj, jmethodID methodID,
                            const jvalue * args) {
        jfloat variable = (*currentEnvs())->CallFloatMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallDoubleMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jdouble result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallDoubleMethodV(currentEnvs(),obj,methodID,args);
        va_end(args);
        jdouble variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallDoubleMethodV(jobject obj, jmethodID methodID,
                        va_list args) {
        jdouble variable = (*currentEnvs())->CallDoubleMethodV(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallDoubleMethodA(jobject obj, jmethodID methodID,
                        const jvalue * args) {
        jdouble variable = (*currentEnvs())->CallDoubleMethodA(currentEnvs(),obj,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallNonvirtualObjectMethod(jobject obj, jclass clazz,
                                       jmethodID methodID, ...) {
        va_list args;
        jobject result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualObjectMethodV(currentEnvs(),obj,clazz,
                                                        methodID,args);
        va_end(args);
        jobject variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallNonvirtualObjectMethodV(jobject obj, jclass clazz,
                                        jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualObjectMethodV(currentEnvs(),obj,clazz,
                                                      methodID,args);
    }
jobject CallNonvirtualObjectMethodA(jobject obj, jclass clazz,
                                        jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualObjectMethodA(currentEnvs(),obj,clazz,
                                                      methodID,args);
    }
jboolean CallNonvirtualBooleanMethod(jobject obj, jclass clazz,
                                         jmethodID methodID, ...) {
        va_list args;
        jboolean result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualBooleanMethodV(currentEnvs(),obj,clazz,
                                                         methodID,args);
        va_end(args);
        jboolean variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallNonvirtualBooleanMethodV(jobject obj, jclass clazz,
                                          jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualBooleanMethodV(currentEnvs(),obj,clazz,
                                                       methodID,args);
    }
jboolean CallNonvirtualBooleanMethodA(jobject obj, jclass clazz,
                                          jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualBooleanMethodA(currentEnvs(),obj,clazz,
                                                       methodID, args);
    }
jbyte CallNonvirtualByteMethod(jobject obj, jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jbyte result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualByteMethodV(currentEnvs(),obj,clazz,
                                                      methodID,args);
        va_end(args);
        jbyte variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallNonvirtualByteMethodV(jobject obj, jclass clazz,
                                    jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualByteMethodV(currentEnvs(),obj,clazz,
                                                    methodID,args);
    }
jbyte CallNonvirtualByteMethodA(jobject obj, jclass clazz,
                                    jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualByteMethodA(currentEnvs(),obj,clazz,
                                                    methodID,args);
    }
jchar CallNonvirtualCharMethod(jobject obj, jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jchar result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualCharMethodV(currentEnvs(),obj,clazz,
                                                      methodID,args);
        va_end(args);
        jchar variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallNonvirtualCharMethodV(jobject obj, jclass clazz,
                                    jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualCharMethodV(currentEnvs(),obj,clazz,
                                                    methodID,args);
    }
jchar CallNonvirtualCharMethodA(jobject obj, jclass clazz,
                                    jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualCharMethodA(currentEnvs(),obj,clazz,
                                                    methodID,args);
    }
jshort CallNonvirtualShortMethod(jobject obj, jclass clazz,
                                     jmethodID methodID, ...) {
        va_list args;
        jshort result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualShortMethodV(currentEnvs(),obj,clazz,
                                                       methodID,args);
        va_end(args);
        jshort variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallNonvirtualShortMethodV(jobject obj, jclass clazz,
                                      jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualShortMethodV(currentEnvs(),obj,clazz,
                                                     methodID,args);
    }
jshort CallNonvirtualShortMethodA(jobject obj, jclass clazz,
                                      jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualShortMethodA(currentEnvs(),obj,clazz,
                                                     methodID,args);
    }
jint CallNonvirtualIntMethod(jobject obj, jclass clazz,
                                 jmethodID methodID, ...) {
        va_list args;
        jint result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualIntMethodV(currentEnvs(),obj,clazz,
                                                     methodID,args);
        va_end(args);
        jint variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallNonvirtualIntMethodV(jobject obj, jclass clazz,
                                  jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualIntMethodV(currentEnvs(),obj,clazz,
                                                   methodID,args);
    }
jint CallNonvirtualIntMethodA(jobject obj, jclass clazz,
                                  jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualIntMethodA(currentEnvs(),obj,clazz,
                                                   methodID,args);
    }
jlong CallNonvirtualLongMethod(jobject obj, jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jlong result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualLongMethodV(currentEnvs(),obj,clazz,
                                                      methodID,args);
        va_end(args);
        jlong variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallNonvirtualLongMethodV(jobject obj, jclass clazz,
                                    jmethodID methodID, va_list args) {
        return (*currentEnvs())->CallNonvirtualLongMethodV(currentEnvs(),obj,clazz,
                                                    methodID,args);
    }
jlong CallNonvirtualLongMethodA(jobject obj, jclass clazz,
                                    jmethodID methodID, const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualLongMethodA(currentEnvs(),obj,clazz,
                                                    methodID,args);
    }
jfloat CallNonvirtualFloatMethod(jobject obj, jclass clazz,
                                     jmethodID methodID, ...) {
        va_list args;
        jfloat result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualFloatMethodV(currentEnvs(),obj,clazz,
                                                       methodID,args);
        va_end(args);
        jfloat variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallNonvirtualFloatMethodV(jobject obj, jclass clazz,
                                      jmethodID methodID,
                                      va_list args) {
        return (*currentEnvs())->CallNonvirtualFloatMethodV(currentEnvs(),obj,clazz,
                                                     methodID,args);
    }
jfloat CallNonvirtualFloatMethodA(jobject obj, jclass clazz,
                                      jmethodID methodID,
                                      const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualFloatMethodA(currentEnvs(),obj,clazz,
                                                     methodID,args);
    }
jdouble CallNonvirtualDoubleMethod(jobject obj, jclass clazz,
                                       jmethodID methodID, ...) {
        va_list args;
        jdouble result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallNonvirtualDoubleMethodV(currentEnvs(),obj,clazz,
                                                        methodID,args);
        va_end(args);
        jdouble variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallNonvirtualDoubleMethodV(jobject obj, jclass clazz,
                                        jmethodID methodID,
                                        va_list args) {
        return (*currentEnvs())->CallNonvirtualDoubleMethodV(currentEnvs(),obj,clazz,
                                                      methodID,args);
    }
jdouble CallNonvirtualDoubleMethodA(jobject obj, jclass clazz,
                                        jmethodID methodID,
                                        const jvalue * args) {
        return (*currentEnvs())->CallNonvirtualDoubleMethodA(currentEnvs(),obj,clazz,
                                                      methodID,args);
    }
jfieldID GetFieldID(jclass clazz, const char *name,
                        const char *sig) {
        jfieldID variable = (*currentEnvs())->GetFieldID(currentEnvs(),clazz,name,sig);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject GetObjectField(jobject obj, jfieldID fieldID) {
        jobject variable = (*currentEnvs())->GetObjectField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean GetBooleanField(jobject obj, jfieldID fieldID) {
        jboolean variable = (*currentEnvs())->GetBooleanField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte GetByteField(jobject obj, jfieldID fieldID) {
        jbyte variable = (*currentEnvs())->GetByteField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar GetCharField(jobject obj, jfieldID fieldID) {
        jchar variable = (*currentEnvs())->GetCharField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort GetShortField(jobject obj, jfieldID fieldID) {
        jshort variable = (*currentEnvs())->GetShortField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint GetIntField(jobject obj, jfieldID fieldID) {
        jint variable = (*currentEnvs())->GetIntField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong GetLongField(jobject obj, jfieldID fieldID) {
        jlong variable = (*currentEnvs())->GetLongField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat GetFloatField(jobject obj, jfieldID fieldID) {
        jfloat variable = (*currentEnvs())->GetFloatField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble GetDoubleField(jobject obj, jfieldID fieldID) {
        jdouble variable = (*currentEnvs())->GetDoubleField(currentEnvs(),obj,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jmethodID GetStaticMethodID(jclass clazz, const char *name,
                                const char *sig) {
        jmethodID variable = (*currentEnvs())->GetStaticMethodID(currentEnvs(),clazz,name,sig);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallStaticObjectMethod(jclass clazz, jmethodID methodID,
                             ...) {
        va_list args;
        jobject result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticObjectMethodV(currentEnvs(),clazz,methodID,args);
        		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
        				(*currentEnvs())->ExceptionDescribe(currentEnvs());
        		 }
        va_end(args);
        jobject variable = result;

 		return variable;
    }
jobject CallStaticObjectMethodV(jclass clazz, jmethodID methodID,
                              va_list args) {
        jobject variable = (*currentEnvs())->CallStaticObjectMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject CallStaticObjectMethodA(jclass clazz, jmethodID methodID,
                              const jvalue *args) {
        jobject variable = (*currentEnvs())->CallStaticObjectMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallStaticBooleanMethod(jclass clazz,
                                     jmethodID methodID, ...) {
        va_list args;
        jboolean result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticBooleanMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jboolean variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallStaticBooleanMethodV(jclass clazz,
                                      jmethodID methodID, va_list args) {
        jboolean variable = (*currentEnvs())->CallStaticBooleanMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean CallStaticBooleanMethodA(jclass clazz,
                                      jmethodID methodID, const jvalue *args) {
        jboolean variable = (*currentEnvs())->CallStaticBooleanMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallStaticByteMethod(jclass clazz,
                               jmethodID methodID, ...) {
        va_list args;
        jbyte result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticByteMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jbyte variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallStaticByteMethodV(jclass clazz,
                                jmethodID methodID, va_list args) {
        jbyte variable = (*currentEnvs())->CallStaticByteMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte CallStaticByteMethodA(jclass clazz,
                                jmethodID methodID, const jvalue *args) {
        jbyte variable = (*currentEnvs())->CallStaticByteMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallStaticCharMethod(jclass clazz,
                               jmethodID methodID, ...) {
        va_list args;
        jchar result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticCharMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jchar variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallStaticCharMethodV(jclass clazz,
                                jmethodID methodID, va_list args) {
        jchar variable = (*currentEnvs())->CallStaticCharMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar CallStaticCharMethodA(jclass clazz,
                                jmethodID methodID, const jvalue *args) {
        jchar variable = (*currentEnvs())->CallStaticCharMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallStaticShortMethod(jclass clazz,
                                 jmethodID methodID, ...) {
        va_list args;
        jshort result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticShortMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jshort variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallStaticShortMethodV(jclass clazz,
                                  jmethodID methodID, va_list args) {
        jshort variable = (*currentEnvs())->CallStaticShortMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort CallStaticShortMethodA(jclass clazz,
                                  jmethodID methodID, const jvalue *args) {
        jshort variable = (*currentEnvs())->CallStaticShortMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallStaticIntMethod(jclass clazz,
                             jmethodID methodID, ...) {
        va_list args;
        jint result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticIntMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jint variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallStaticIntMethodV(jclass clazz,
                              jmethodID methodID, va_list args) {
        jint variable = (*currentEnvs())->CallStaticIntMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint CallStaticIntMethodA(jclass clazz,
                              jmethodID methodID, const jvalue *args) {
        jint variable = (*currentEnvs())->CallStaticIntMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallStaticLongMethod(jclass clazz,
                               jmethodID methodID, ...) {
        va_list args;
        jlong result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticLongMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jlong variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallStaticLongMethodV(jclass clazz,
                                jmethodID methodID, va_list args) {
        jlong variable = (*currentEnvs())->CallStaticLongMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong CallStaticLongMethodA(jclass clazz,
                                jmethodID methodID, const jvalue *args) {
        jlong variable = (*currentEnvs())->CallStaticLongMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallStaticFloatMethod(jclass clazz,
                                 jmethodID methodID, ...) {
        va_list args;
        jfloat result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticFloatMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jfloat variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallStaticFloatMethodV(jclass clazz,
                                  jmethodID methodID, va_list args) {
        jfloat variable = (*currentEnvs())->CallStaticFloatMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat CallStaticFloatMethodA(jclass clazz,
                                  jmethodID methodID, const jvalue *args) {
        jfloat variable = (*currentEnvs())->CallStaticFloatMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallStaticDoubleMethod(jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jdouble result;
        va_start(args,methodID);
        result = (*currentEnvs())->CallStaticDoubleMethodV(currentEnvs(),clazz,methodID,args);
        va_end(args);
        jdouble variable = result;
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallStaticDoubleMethodV(jclass clazz,
                                    jmethodID methodID, va_list args) {
        jdouble variable = (*currentEnvs())->CallStaticDoubleMethodV(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble CallStaticDoubleMethodA(jclass clazz,
                                    jmethodID methodID, const jvalue *args) {
        jdouble variable = (*currentEnvs())->CallStaticDoubleMethodA(currentEnvs(),clazz,methodID,args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfieldID GetStaticFieldID(jclass clazz, const char *name,
                              const char *sig) {
        jfieldID variable = (*currentEnvs())->GetStaticFieldID(currentEnvs(),clazz,name,sig);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject GetStaticObjectField(jclass clazz, jfieldID fieldID) {
        jobject variable = (*currentEnvs())->GetStaticObjectField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean GetStaticBooleanField(jclass clazz, jfieldID fieldID) {
        jboolean variable = (*currentEnvs())->GetStaticBooleanField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte GetStaticByteField(jclass clazz, jfieldID fieldID) {
        jbyte variable = (*currentEnvs())->GetStaticByteField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar GetStaticCharField(jclass clazz, jfieldID fieldID) {
        jchar variable = (*currentEnvs())->GetStaticCharField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort GetStaticShortField(jclass clazz, jfieldID fieldID) {
        jshort variable = (*currentEnvs())->GetStaticShortField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint GetStaticIntField(jclass clazz, jfieldID fieldID) {
        jint variable = (*currentEnvs())->GetStaticIntField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong GetStaticLongField(jclass clazz, jfieldID fieldID) {
        jlong variable = (*currentEnvs())->GetStaticLongField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat GetStaticFloatField(jclass clazz, jfieldID fieldID) {
        jfloat variable = (*currentEnvs())->GetStaticFloatField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble GetStaticDoubleField(jclass clazz, jfieldID fieldID) {
        jdouble variable = (*currentEnvs())->GetStaticDoubleField(currentEnvs(),clazz,fieldID);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jstring NewString(const jchar *unicode, jsize len) {
        jstring variable = (*currentEnvs())->NewString(currentEnvs(),unicode,len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jsize GetStringLength(jstring str) {
        jsize variable = (*currentEnvs())->GetStringLength(currentEnvs(),str);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
const jchar *GetStringChars(jstring str, jboolean *isCopy) {
        const jchar variable = (*currentEnvs())->GetStringChars(currentEnvs(),str,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jstring NewStringUTF(const char *utf) {
        jstring variable = (*currentEnvs())->NewStringUTF(currentEnvs(),utf);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jsize GetStringUTFLength(jstring str) {
        jsize variable = (*currentEnvs())->GetStringUTFLength(currentEnvs(),str);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
const char* GetStringUTFChars(jstring str, jboolean *isCopy) {
        const char* variable = (*currentEnvs())->GetStringUTFChars(currentEnvs(),str,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jsize GetArrayLength(jarray array) {
        jsize variable = (*currentEnvs())->GetArrayLength(currentEnvs(),array);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobjectArray NewObjectArray(jsize len, jclass clazz,
                                jobject init) {
        jobjectArray variable = (*currentEnvs())->NewObjectArray(currentEnvs(),len,clazz,init);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject GetObjectArrayElement(jobjectArray array, jsize index) {
        jobject variable = (*currentEnvs())->GetObjectArrayElement(currentEnvs(),array,index);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbooleanArray NewBooleanArray(jsize len) {
        jbooleanArray variable = (*currentEnvs())->NewBooleanArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyteArray NewByteArray(jsize len) {
        jbyteArray variable = (*currentEnvs())->NewByteArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jcharArray NewCharArray(jsize len) {
        jcharArray variable = (*currentEnvs())->NewCharArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshortArray NewShortArray(jsize len) {
        jshortArray variable = (*currentEnvs())->NewShortArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jintArray NewIntArray(jsize len) {
        jintArray variable = (*currentEnvs())->NewIntArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlongArray NewLongArray(jsize len) {
        jlongArray variable = (*currentEnvs())->NewLongArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloatArray NewFloatArray(jsize len) {
        jfloatArray variable = (*currentEnvs())->NewFloatArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdoubleArray NewDoubleArray(jsize len) {
        jdoubleArray variable = (*currentEnvs())->NewDoubleArray(currentEnvs(),len);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean * GetBooleanArrayElements(jbooleanArray array, jboolean *isCopy) {
        jboolean * variable = (*currentEnvs())->GetBooleanArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jbyte * GetByteArrayElements(jbyteArray array, jboolean *isCopy) {
        jbyte * variable = (*currentEnvs())->GetByteArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jchar * GetCharArrayElements(jcharArray array, jboolean *isCopy) {
        jchar * variable = (*currentEnvs())->GetCharArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jshort * GetShortArrayElements(jshortArray array, jboolean *isCopy) {
        jshort * variable = (*currentEnvs())->GetShortArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint * GetIntArrayElements(jintArray array, jboolean *isCopy) {
        jint * variable = (*currentEnvs())->GetIntArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong * GetLongArrayElements(jlongArray array, jboolean *isCopy) {
        jlong * variable = (*currentEnvs())->GetLongArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jfloat * GetFloatArrayElements(jfloatArray array, jboolean *isCopy) {
        jfloat * variable = (*currentEnvs())->GetFloatArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jdouble * GetDoubleArrayElements(jdoubleArray array, jboolean *isCopy) {
        jdouble * variable = (*currentEnvs())->GetDoubleArrayElements(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint RegisterNatives(jclass clazz, const JNINativeMethod *methods,
                         jint nMethods) {
        jint variable = (*currentEnvs())->RegisterNatives(currentEnvs(),clazz,methods,nMethods);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint UnregisterNatives(jclass clazz) {
        jint variable = (*currentEnvs())->UnregisterNatives(currentEnvs(),clazz);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint MonitorEnter(jobject obj) {
        jint variable = (*currentEnvs())->MonitorEnter(currentEnvs(),obj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint MonitorExit(jobject obj) {
        jint variable = (*currentEnvs())->MonitorExit(currentEnvs(),obj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint GetJavaVM(JavaVM **vm) {
        jint variable = (*currentEnvs())->GetJavaVM(currentEnvs(),vm);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
void * GetPrimitiveArrayCritical(jarray array, jboolean *isCopy) {
        void * variable = (*currentEnvs())->GetPrimitiveArrayCritical(currentEnvs(),array,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
const jchar * GetStringCritical(jstring string, jboolean *isCopy) {
        const jchar * variable = (*currentEnvs())->GetStringCritical(currentEnvs(),string,isCopy);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jweak NewWeakGlobalRef(jobject obj) {
        jweak variable = (*currentEnvs())->NewWeakGlobalRef(currentEnvs(),obj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jboolean ExceptionCheck() {
        jboolean variable = (*currentEnvs())->ExceptionCheck(currentEnvs());
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobject NewDirectByteBuffer(void* address, jlong capacity) {
        jobject variable = (*currentEnvs())->NewDirectByteBuffer(currentEnvs(), address, capacity);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
void* GetDirectBufferAddress(jobject buf) {
        void* variable = (*currentEnvs())->GetDirectBufferAddress(currentEnvs(), buf);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jlong GetDirectBufferCapacity(jobject buf) {
        jlong variable = (*currentEnvs())->GetDirectBufferCapacity(currentEnvs(), buf);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jobjectRefType GetObjectRefType(jobject obj) {
        jobjectRefType variable = (*currentEnvs())->GetObjectRefType(currentEnvs(), obj);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
    }
jint DestroyJavaVM() {
    jint variable = (*(gjavaVMGlob->jvm))->DestroyJavaVM(gjavaVMGlob->jvm);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
}
jint AttachCurrentThread(void **penv, void *args) {
    jint variable = (*(gjavaVMGlob->jvm))->AttachCurrentThread(gjavaVMGlob->jvm, penv, args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
}
jint DetachCurrentThread() {
    jint variable = (*(gjavaVMGlob->jvm))->DetachCurrentThread(gjavaVMGlob->jvm);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
}
jint GetEnv(void **penv, jint version) {
    jint variable = (*(gjavaVMGlob->jvm))->GetEnv(gjavaVMGlob->jvm, penv, version);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
}
jint AttachCurrentThreadAsDaemon(void **penv, void *args) {
    jint variable = (*(gjavaVMGlob->jvm))->AttachCurrentThreadAsDaemon(gjavaVMGlob->jvm, penv, args);
		if((*currentEnvs())->ExceptionCheck(currentEnvs())){
				(*currentEnvs())->ExceptionDescribe(currentEnvs());
		 }
 		return variable;
}
void ExceptionDescribe() {
        (*currentEnvs())->ExceptionDescribe(currentEnvs());
    }
void ExceptionClear() {
        (*currentEnvs())->ExceptionClear(currentEnvs());
    }
void FatalError(const char *msg) {
        (*currentEnvs())->FatalError(currentEnvs(), msg);
    }
void DeleteGlobalRef(jobject gref) {
        (*currentEnvs())->DeleteGlobalRef(currentEnvs(),gref);
    }
void DeleteLocalRef(jobject obj) {
        (*currentEnvs())->DeleteLocalRef(currentEnvs(), obj);
    }
void CallVoidMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        va_start(args,methodID);
        (*currentEnvs())->CallVoidMethodV(currentEnvs(),obj,methodID,args);
        if((*currentEnvs())->ExceptionCheck(currentEnvs())){
        		(*currentEnvs())->ExceptionDescribe(currentEnvs());
         }
        va_end(args);
    }
void CallVoidMethodV(jobject obj, jmethodID methodID,
                         va_list args) {
        (*currentEnvs())->CallVoidMethodV(currentEnvs(),obj,methodID,args);
                if((*currentEnvs())->ExceptionCheck(currentEnvs())){
                		(*currentEnvs())->ExceptionDescribe(currentEnvs());
                 }
    }
void CallVoidMethodA(jobject obj, jmethodID methodID,
                         const jvalue * args) {
        (*currentEnvs())->CallVoidMethodA(currentEnvs(),obj,methodID,args);
                if((*currentEnvs())->ExceptionCheck(currentEnvs())){
                		(*currentEnvs())->ExceptionDescribe(currentEnvs());
                 }
    }
void CallNonvirtualVoidMethod(jobject obj, jclass clazz,
                                  jmethodID methodID, ...) {
        va_list args;
        va_start(args,methodID);
        (*currentEnvs())->CallNonvirtualVoidMethodV(currentEnvs(),obj,clazz,methodID,args);
        va_end(args);
    }
void CallNonvirtualVoidMethodV(jobject obj, jclass clazz,
                                   jmethodID methodID,
                                   va_list args) {
        (*currentEnvs())->CallNonvirtualVoidMethodV(currentEnvs(),obj,clazz,methodID,args);
    }
void CallNonvirtualVoidMethodA(jobject obj, jclass clazz,
                                   jmethodID methodID,
                                   const jvalue * args) {
        (*currentEnvs())->CallNonvirtualVoidMethodA(currentEnvs(),obj,clazz,methodID,args);
    }
void SetObjectField(jobject obj, jfieldID fieldID, jobject val) {
        (*currentEnvs())->SetObjectField(currentEnvs(),obj,fieldID,val);
    }
void SetBooleanField(jobject obj, jfieldID fieldID,
                         jboolean val) {
        (*currentEnvs())->SetBooleanField(currentEnvs(),obj,fieldID,val);
    }
void SetByteField(jobject obj, jfieldID fieldID,
                      jbyte val) {
        (*currentEnvs())->SetByteField(currentEnvs(),obj,fieldID,val);
    }
void SetCharField(jobject obj, jfieldID fieldID,
                      jchar val) {
        (*currentEnvs())->SetCharField(currentEnvs(),obj,fieldID,val);
    }
void SetShortField(jobject obj, jfieldID fieldID,
                       jshort val) {
        (*currentEnvs())->SetShortField(currentEnvs(),obj,fieldID,val);
    }
void SetIntField(jobject obj, jfieldID fieldID,
                     jint val) {
        (*currentEnvs())->SetIntField(currentEnvs(),obj,fieldID,val);
    }
void SetLongField(jobject obj, jfieldID fieldID,
                      jlong val) {
        (*currentEnvs())->SetLongField(currentEnvs(),obj,fieldID,val);
    }
void SetFloatField(jobject obj, jfieldID fieldID,
                       jfloat val) {
        (*currentEnvs())->SetFloatField(currentEnvs(),obj,fieldID,val);
    }
void SetDoubleField(jobject obj, jfieldID fieldID,
                        jdouble val) {
        (*currentEnvs())->SetDoubleField(currentEnvs(),obj,fieldID,val);
    }
void CallStaticVoidMethod(jclass cls, jmethodID methodID, ...) {
        va_list args;
        va_start(args,methodID);
        (*currentEnvs())->CallStaticVoidMethodV(currentEnvs(),cls,methodID,args);
                if((*currentEnvs())->ExceptionCheck(currentEnvs())){
                		(*currentEnvs())->ExceptionDescribe(currentEnvs());
                 }
        va_end(args);
    }
void CallStaticVoidMethodV(jclass cls, jmethodID methodID,
                               va_list args) {
        (*currentEnvs())->CallStaticVoidMethodV(currentEnvs(),cls,methodID,args);
                if((*currentEnvs())->ExceptionCheck(currentEnvs())){
                		(*currentEnvs())->ExceptionDescribe(currentEnvs());
                 }
    }
void CallStaticVoidMethodA(jclass cls, jmethodID methodID,
                               const jvalue * args) {
        (*currentEnvs())->CallStaticVoidMethodA(currentEnvs(),cls,methodID,args);
                if((*currentEnvs())->ExceptionCheck(currentEnvs())){
                		(*currentEnvs())->ExceptionDescribe(currentEnvs());
                 }
    }
void SetStaticObjectField(jclass clazz, jfieldID fieldID,
                        jobject value) {
      (*currentEnvs())->SetStaticObjectField(currentEnvs(),clazz,fieldID,value);
              if((*currentEnvs())->ExceptionCheck(currentEnvs())){
              		(*currentEnvs())->ExceptionDescribe(currentEnvs());
               }
    }
void SetStaticBooleanField(jclass clazz, jfieldID fieldID,
                        jboolean value) {
      (*currentEnvs())->SetStaticBooleanField(currentEnvs(),clazz,fieldID,value);
              if((*currentEnvs())->ExceptionCheck(currentEnvs())){
              		(*currentEnvs())->ExceptionDescribe(currentEnvs());
               }
    }
void SetStaticByteField(jclass clazz, jfieldID fieldID,
                        jbyte value) {
      (*currentEnvs())->SetStaticByteField(currentEnvs(),clazz,fieldID,value);
              if((*currentEnvs())->ExceptionCheck(currentEnvs())){
              		(*currentEnvs())->ExceptionDescribe(currentEnvs());
               }
    }
void SetStaticCharField(jclass clazz, jfieldID fieldID,
                        jchar value) {
      (*currentEnvs())->SetStaticCharField(currentEnvs(),clazz,fieldID,value);
              if((*currentEnvs())->ExceptionCheck(currentEnvs())){
              		(*currentEnvs())->ExceptionDescribe(currentEnvs());
               }
    }
void SetStaticShortField(jclass clazz, jfieldID fieldID,
                        jshort value) {
      (*currentEnvs())->SetStaticShortField(currentEnvs(),clazz,fieldID,value);
    }
void SetStaticIntField(jclass clazz, jfieldID fieldID,
                        jint value) {
      (*currentEnvs())->SetStaticIntField(currentEnvs(),clazz,fieldID,value);
    }
void SetStaticLongField(jclass clazz, jfieldID fieldID,
                        jlong value) {
      (*currentEnvs())->SetStaticLongField(currentEnvs(),clazz,fieldID,value);
    }
void SetStaticFloatField(jclass clazz, jfieldID fieldID,
                        jfloat value) {
      (*currentEnvs())->SetStaticFloatField(currentEnvs(),clazz,fieldID,value);
    }
void SetStaticDoubleField(jclass clazz, jfieldID fieldID,
                        jdouble value) {
      (*currentEnvs())->SetStaticDoubleField(currentEnvs(),clazz,fieldID,value);
    }
void ReleaseStringChars(jstring str, const jchar *chars) {
        (*currentEnvs())->ReleaseStringChars(currentEnvs(),str,chars);
    }
void ReleaseStringUTFChars(jstring str, const char* chars) {
        (*currentEnvs())->ReleaseStringUTFChars(currentEnvs(),str,chars);
    }
void SetObjectArrayElement(jobjectArray array, jsize index,
                               jobject val) {
        (*currentEnvs())->SetObjectArrayElement(currentEnvs(),array,index,val);
    }
void ReleaseBooleanArrayElements(jbooleanArray array,
                                     jboolean *elems,
                                     jint mode) {
        (*currentEnvs())->ReleaseBooleanArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseByteArrayElements(jbyteArray array,
                                  jbyte *elems,
                                  jint mode) {
        (*currentEnvs())->ReleaseByteArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseCharArrayElements(jcharArray array,
                                  jchar *elems,
                                  jint mode) {
        (*currentEnvs())->ReleaseCharArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseShortArrayElements(jshortArray array,
                                   jshort *elems,
                                   jint mode) {
        (*currentEnvs())->ReleaseShortArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseIntArrayElements(jintArray array,
                                 jint *elems,
                                 jint mode) {
        (*currentEnvs())->ReleaseIntArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseLongArrayElements(jlongArray array,
                                  jlong *elems,
                                  jint mode) {
        (*currentEnvs())->ReleaseLongArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseFloatArrayElements(jfloatArray array,
                                   jfloat *elems,
                                   jint mode) {
        (*currentEnvs())->ReleaseFloatArrayElements(currentEnvs(),array,elems,mode);
    }
void ReleaseDoubleArrayElements(jdoubleArray array,
                                    jdouble *elems,
                                    jint mode) {
        (*currentEnvs())->ReleaseDoubleArrayElements(currentEnvs(),array,elems,mode);
    }
void GetBooleanArrayRegion(jbooleanArray array,
                               jsize start, jsize len, jboolean *buf) {
        (*currentEnvs())->GetBooleanArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetByteArrayRegion(jbyteArray array,
                            jsize start, jsize len, jbyte *buf) {
        (*currentEnvs())->GetByteArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetCharArrayRegion(jcharArray array,
                            jsize start, jsize len, jchar *buf) {
        (*currentEnvs())->GetCharArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetShortArrayRegion(jshortArray array,
                             jsize start, jsize len, jshort *buf) {
        (*currentEnvs())->GetShortArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetIntArrayRegion(jintArray array,
                           jsize start, jsize len, jint *buf) {
        (*currentEnvs())->GetIntArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetLongArrayRegion(jlongArray array,
                            jsize start, jsize len, jlong *buf) {
        (*currentEnvs())->GetLongArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetFloatArrayRegion(jfloatArray array,
                             jsize start, jsize len, jfloat *buf) {
        (*currentEnvs())->GetFloatArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetDoubleArrayRegion(jdoubleArray array,
                              jsize start, jsize len, jdouble *buf) {
        (*currentEnvs())->GetDoubleArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
                               const jboolean *buf) {
        (*currentEnvs())->SetBooleanArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetByteArrayRegion(jbyteArray array, jsize start, jsize len,
                            const jbyte *buf) {
        (*currentEnvs())->SetByteArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetCharArrayRegion(jcharArray array, jsize start, jsize len,
                            const jchar *buf) {
        (*currentEnvs())->SetCharArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetShortArrayRegion(jshortArray array, jsize start, jsize len,
                             const jshort *buf) {
        (*currentEnvs())->SetShortArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetIntArrayRegion(jintArray array, jsize start, jsize len,
                           const jint *buf) {
        (*currentEnvs())->SetIntArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetLongArrayRegion(jlongArray array, jsize start, jsize len,
                            const jlong *buf) {
        (*currentEnvs())->SetLongArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
                             const jfloat *buf) {
        (*currentEnvs())->SetFloatArrayRegion(currentEnvs(),array,start,len,buf);
    }
void SetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
                              const jdouble *buf) {
        (*currentEnvs())->SetDoubleArrayRegion(currentEnvs(),array,start,len,buf);
    }
void GetStringRegion(jstring str, jsize start, jsize len, jchar *buf) {
        (*currentEnvs())->GetStringRegion(currentEnvs(),str,start,len,buf);
    }
void GetStringUTFRegion(jstring str, jsize start, jsize len, char *buf) {
        (*currentEnvs())->GetStringUTFRegion(currentEnvs(),str,start,len,buf);
    }
void ReleasePrimitiveArrayCritical(jarray array, void *carray, jint mode) {
        (*currentEnvs())->ReleasePrimitiveArrayCritical(currentEnvs(),array,carray,mode);
    }
void ReleaseStringCritical(jstring string, const jchar *cstring) {
        (*currentEnvs())->ReleaseStringCritical(currentEnvs(),string,cstring);
    }
void DeleteWeakGlobalRef(jweak ref) {
        (*currentEnvs())->DeleteWeakGlobalRef(currentEnvs(),ref);
    }